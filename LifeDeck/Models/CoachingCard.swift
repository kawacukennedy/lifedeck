import Foundation
import SwiftUI

// MARK: - Card Priority
enum CardPriority: String, CaseIterable, Codable {
    case low = "low"
    case medium = "medium"
    case high = "high"
    case urgent = "urgent"
    
    var color: Color {
        switch self {
        case .low: return .gray
        case .medium: return .blue
        case .high: return .orange
        case .urgent: return .red
        }
    }
    
    var weight: Int {
        switch self {
        case .low: return 1
        case .medium: return 2
        case .high: return 3
        case .urgent: return 4
        }
    }
}

// MARK: - Card Action Type
enum CardActionType: String, CaseIterable, Codable {
    case quick = "quick"           // 1-2 minutes
    case standard = "standard"     // 5-15 minutes
    case extended = "extended"     // 30+ minutes
    case habit = "habit"           // Daily habit building
    case reflection = "reflection"  // Mindfulness/journaling
    
    var displayName: String {
        switch self {
        case .quick: return "Quick Action"
        case .standard: return "Standard Task"
        case .extended: return "Deep Work"
        case .habit: return "Daily Habit"
        case .reflection: return "Reflection"
        }
    }
    
    var estimatedDuration: String {
        switch self {
        case .quick: return "1-2 min"
        case .standard: return "5-15 min"
        case .extended: return "30+ min"
        case .habit: return "Ongoing"
        case .reflection: return "5-10 min"
        }
    }
    
    var icon: String {
        switch self {
        case .quick: return "bolt.fill"
        case .standard: return "checkmark.circle.fill"
        case .extended: return "clock.fill"
        case .habit: return "repeat.circle.fill"
        case .reflection: return "brain.head.profile"
        }
    }
}

// MARK: - Card Status
enum CardStatus: String, CaseIterable, Codable {
    case pending = "pending"
    case completed = "completed"
    case dismissed = "dismissed"
    case snoozed = "snoozed"
    case expired = "expired"
}

// MARK: - Card Context
struct CardContext: Codable {
    var timeOfDay: String? // "morning", "afternoon", "evening"
    var location: String? // "home", "work", "gym", etc.
    var weatherCondition: String? // "sunny", "rainy", etc.
    var userMood: String? // "energetic", "stressed", "calm"
    var dayOfWeek: String?
    var isWorkday: Bool = true
    
    init() {}
}

// MARK: - Card Personalization
struct CardPersonalization: Codable {
    var userPreferences: [String: Any] = [:]
    var pastSuccessRate: Double = 0.0
    var optimalTime: String? // When user typically completes this type of card
    var difficulty: Double = 1.0 // 0.5 = easy, 1.0 = normal, 1.5 = hard
    var relevanceScore: Double = 1.0
    
    init() {}
    
    // Custom Codable implementation due to [String: Any]
    enum CodingKeys: String, CodingKey {
        case pastSuccessRate, optimalTime, difficulty, relevanceScore
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pastSuccessRate = try container.decode(Double.self, forKey: .pastSuccessRate)
        optimalTime = try container.decodeIfPresent(String.self, forKey: .optimalTime)
        difficulty = try container.decode(Double.self, forKey: .difficulty)
        relevanceScore = try container.decode(Double.self, forKey: .relevanceScore)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pastSuccessRate, forKey: .pastSuccessRate)
        try container.encodeIfPresent(optimalTime, forKey: .optimalTime)
        try container.encode(difficulty, forKey: .difficulty)
        try container.encode(relevanceScore, forKey: .relevanceScore)
    }
}

// MARK: - Coaching Card Model
struct CoachingCard: Identifiable, Codable, Equatable {
    let id: UUID
    let title: String
    let description: String
    let actionText: String // The specific action to take
    let domain: LifeDomain
    let actionType: CardActionType
    let priority: CardPriority
    
    // Content and presentation
    let icon: String
    let backgroundColor: String? // Hex color
    let tips: [String] // Additional helpful tips
    let benefits: [String] // Why this action matters
    
    // Metadata
    var status: CardStatus = .pending
    let createdAt: Date
    var completedAt: Date?
    var dismissedAt: Date?
    var snoozedUntil: Date?
    
    // AI and personalization
    var context: CardContext
    var personalization: CardPersonalization
    let aiGenerated: Bool // True if generated by AI vs template
    let templateId: String? // Reference to base template if applicable
    
    // Engagement tracking
    var viewCount: Int = 0
    var timeSpentViewing: TimeInterval = 0
    
    init(
        title: String,
        description: String,
        actionText: String,
        domain: LifeDomain,
        actionType: CardActionType = .standard,
        priority: CardPriority = .medium,
        icon: String,
        backgroundColor: String? = nil,
        tips: [String] = [],
        benefits: [String] = [],
        context: CardContext = CardContext(),
        personalization: CardPersonalization = CardPersonalization(),
        aiGenerated: Bool = false,
        templateId: String? = nil
    ) {
        self.id = UUID()
        self.title = title
        self.description = description
        self.actionText = actionText
        self.domain = domain
        self.actionType = actionType
        self.priority = priority
        self.icon = icon
        self.backgroundColor = backgroundColor
        self.tips = tips
        self.benefits = benefits
        self.context = context
        self.personalization = personalization
        self.aiGenerated = aiGenerated
        self.templateId = templateId
        self.createdAt = Date()
    }
    
    // MARK: - Methods
    mutating func markCompleted() {
        status = .completed
        completedAt = Date()
    }
    
    mutating func markDismissed() {
        status = .dismissed
        dismissedAt = Date()
    }
    
    mutating func snooze(until date: Date) {
        status = .snoozed
        snoozedUntil = date
    }
    
    mutating func incrementViewCount() {
        viewCount += 1
    }
    
    var isExpired: Bool {
        let daysSinceCreation = Calendar.current.dateComponents([.day], from: createdAt, to: Date()).day ?? 0
        return daysSinceCreation > 7 // Cards expire after a week
    }
    
    var isAvailable: Bool {
        switch status {
        case .pending:
            return true
        case .snoozed:
            return snoozedUntil != nil && Date() >= snoozedUntil!
        case .completed, .dismissed, .expired:
            return false
        }
    }
    
    var displayColor: Color {
        if let bgColor = backgroundColor {
            return Color(hex: bgColor)
        }
        return domain.color
    }
    
    var estimatedImpact: String {
        let impact = personalization.relevanceScore * Double(priority.weight)
        switch impact {
        case 0..<2: return "Low Impact"
        case 2..<4: return "Medium Impact"
        case 4..<6: return "High Impact"
        default: return "Maximum Impact"
        }
    }
    
    // MARK: - Equatable
    static func == (lhs: CoachingCard, rhs: CoachingCard) -> Bool {
        lhs.id == rhs.id
    }
}

// MARK: - Sample Cards Factory
struct SampleCards {
    static func createHealthCards() -> [CoachingCard] {
        return [
            CoachingCard(
                title: "Take a Mindful Walk",
                description: "Step outside for a 10-minute walk and focus on your breathing",
                actionText: "Walk for 10 minutes outside",
                domain: .health,
                actionType: .standard,
                priority: .medium,
                icon: "figure.walk",
                tips: ["Leave your phone behind", "Focus on your breathing", "Notice your surroundings"],
                benefits: ["Improves cardiovascular health", "Reduces stress", "Boosts mood"]
            ),
            CoachingCard(
                title: "Drink a Glass of Water",
                description: "Hydrate your body with a full glass of water right now",
                actionText: "Drink 8oz of water",
                domain: .health,
                actionType: .quick,
                priority: .low,
                icon: "drop.fill",
                tips: ["Use a water bottle tracker", "Add lemon for flavor"],
                benefits: ["Improves hydration", "Supports metabolism", "Enhances focus"]
            ),
            CoachingCard(
                title: "Do 20 Push-ups",
                description: "Quick strength training to energize your day",
                actionText: "Complete 20 push-ups",
                domain: .health,
                actionType: .quick,
                priority: .medium,
                icon: "figure.strengthtraining.functional",
                tips: ["Modify on knees if needed", "Focus on proper form"],
                benefits: ["Builds upper body strength", "Boosts energy", "Improves posture"]
            )
        ]
    }
    
    static func createFinanceCards() -> [CoachingCard] {
        return [
            CoachingCard(
                title: "Review Yesterday's Expenses",
                description: "Take 5 minutes to review what you spent money on yesterday",
                actionText: "Review and categorize yesterday's spending",
                domain: .finance,
                actionType: .standard,
                priority: .medium,
                icon: "chart.line.uptrend.xyaxis",
                tips: ["Use your banking app", "Look for unnecessary purchases", "Note spending patterns"],
                benefits: ["Increases spending awareness", "Helps identify waste", "Improves budgeting"]
            ),
            CoachingCard(
                title: "Set Up Automatic Savings",
                description: "Automate $25 weekly transfer to your savings account",
                actionText: "Set up $25/week automatic savings",
                domain: .finance,
                actionType: .extended,
                priority: .high,
                icon: "banknote.fill",
                tips: ["Start small and increase over time", "Use a separate savings account"],
                benefits: ["Builds emergency fund", "Creates saving habit", "Reduces financial stress"]
            )
        ]
    }
    
    static func createProductivityCards() -> [CoachingCard] {
        return [
            CoachingCard(
                title: "Clear Your Desk",
                description: "Spend 5 minutes organizing your workspace for better focus",
                actionText: "Organize and clear your desk",
                domain: .productivity,
                actionType: .quick,
                priority: .medium,
                icon: "desktopcomputer",
                tips: ["Keep only essentials visible", "Use organizers for supplies"],
                benefits: ["Reduces distractions", "Improves focus", "Creates calm environment"]
            ),
            CoachingCard(
                title: "Plan Tomorrow's Top 3",
                description: "Write down the three most important tasks for tomorrow",
                actionText: "List tomorrow's top 3 priorities",
                domain: .productivity,
                actionType: .standard,
                priority: .high,
                icon: "list.bullet.clipboard",
                tips: ["Be specific with tasks", "Estimate time needed", "Start with hardest first"],
                benefits: ["Improves planning", "Reduces decision fatigue", "Increases productivity"]
            )
        ]
    }
    
    static func createMindfulnessCards() -> [CoachingCard] {
        return [
            CoachingCard(
                title: "Take 5 Deep Breaths",
                description: "Pause and take five slow, intentional breaths",
                actionText: "Complete 5 deep breathing cycles",
                domain: .mindfulness,
                actionType: .quick,
                priority: .medium,
                icon: "lungs.fill",
                tips: ["Inhale for 4 counts", "Hold for 2 counts", "Exhale for 6 counts"],
                benefits: ["Reduces stress", "Improves focus", "Calms nervous system"]
            ),
            CoachingCard(
                title: "Write Three Gratitudes",
                description: "List three things you're grateful for today",
                actionText: "Write 3 things you're grateful for",
                domain: .mindfulness,
                actionType: .standard,
                priority: .medium,
                icon: "heart.text.square.fill",
                tips: ["Be specific", "Include small moments", "Feel the emotion"],
                benefits: ["Improves mood", "Increases happiness", "Builds positive mindset"]
            )
        ]
    }
    
    static func allSampleCards() -> [CoachingCard] {
        return createHealthCards() + createFinanceCards() + createProductivityCards() + createMindfulnessCards()
    }
}

// MARK: - Color Extension for Hex Support
extension Color {
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (r, g, b) = ((int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (r, g, b) = (int >> 16, int >> 8 & 0xFF, int & 0xFF)
        default:
            (r, g, b) = (1, 1, 0)
        }

        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue:  Double(b) / 255,
            opacity: 1
        )
    }
}
